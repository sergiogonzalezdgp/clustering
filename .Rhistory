theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
figura4
#Gráfico de densidad uso de componentes
figura4 <- ggplot(estudiantes, aes(Fecha)) +
geom_density(aes(fill=factor(Componente)), alpha=0.8, linetype = "blank") +
labs(title="Gráfico de densidad",
subtitle="Uso de componentes estudiantes",
x="Meses", y= "Densidad",
fill="Componentes") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), plot.margin = unit(c(1, 1, 1, 1), "cm"))
figura4
View(usuarios_cnt)
str(interacciones_cnt)
summary(interacciones_cnt)
summary(usuarios_cnt)
it_g <- ggplot(interacciones_cnt, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes') +
ylab("Interacciones") + xlab("") + labs(title="Conteo todos los usuarios") +
theme(plot.title = element_text(hjust = 0.5)) +geom_smooth(method = "lm")
it_g
ut_g <- ggplot(usuarios_cnt, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes')  +
ylab("Interacciones") + xlab("") + labs(title="Conteo Estudiantes") +
theme(plot.title = element_text(hjust = 0.5))+geom_smooth(method = "lm")
figura1 <- ggarrange(it_g, ut_g, ncol = 2, nrow = 1) + theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))
figura1
summary(it_g)
rm(usuarios_cnt2)
usuarios_cnt
ago.sep %>% filter(usuarios_cnt$fecha <= 2020/08/15 & usuarios_cnt$fecha <= 2020/09/15)
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha <= 2020/08/15 & usuarios_cnt$fecha <= 2020/09/15)
View(ago.sep)
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha <= 2020/08/15)
class(usuarios_cnt$fecha)
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha <= "2020/08/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha => "2020/08/15" & usuarios_cnt$fecha <= "2020/09/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha => "2020/08/15" && usuarios_cnt$fecha <= "2020/09/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha => "2020/08/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha >= "2020/08/15" && usuarios_cnt$fecha <= "2020/09/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha >= "2020/08/15" & usuarios_cnt$fecha <= "2020/09/15")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha >= "2020/08/01" & usuarios_cnt$fecha <= "2020/09/31")
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha >= "2020/08/01" & usuarios_cnt$fecha <= "2020/09/02")
View(ago.sep)
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Dia') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5)) +geom_smooth(method = "lm")
ultimomes
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Dia') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5))
ultimomes
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5))
#Gráfico de densidad uso de componentes
figura4 <- ggplot(estudiantes, aes(Fecha)) +
geom_density(aes(fill=factor(Componente)), alpha=0.8, linetype = "blank") +
labs(title="Gráfico de densidad",
subtitle="Uso de componentes estudiantes",
x="Meses", y= "Densidad",
fill="Componentes") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), plot.margin = unit(c(1, 1, 1, 1), "cm"))
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5))
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5))
ultimomes
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day"))
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day")) %>% [is.na(int_join)] <- 0
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day")) %>% ago.sep[is.na(int_join)] <- 0
ago.sep[is.na(int_join)] <- 0
ago.sep[is.na(ago.sep)] <- 0
#Extracción de último mes de clases
ago.sep <- filter(usuarios_cnt, usuarios_cnt$fecha >= "2020/08/01" & usuarios_cnt$fecha <= "2020/09/02")
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day"))
ago.sep[is.na(ago.sep)] <- 0
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day"))
View(ago.sep)
ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day"))
ago.sep[is.na(ago.sep)] <- 0
View(ago.sep)
ago.sep <- ago.sep %>% complete(fecha = seq.Date(min(fecha), max(fecha), by="day"))
ago.sep[is.na(ago.sep)] <- 0
View(ago.sep)
#Último mes de clases
ultimomes <- ggplot(ago.sep, aes(fecha, cnt)) + geom_line() + scale_x_date('Mes') +
ylab("Interacciones") + xlab("") + labs(title="Último mes de clases") +
theme(plot.title = element_text(hjust = 0.5))
ultimomes
summary(ago.sep)
estudiantes_cnt$cnt - ago.sep$cnt
usuarios_cnt$cnt - ago.sep$cnt
colSums(usuarios_cnt[,1]) - colSums(ago.sep [,1])
colSums(usuarios_cnt[,1])
sum(usuarios_cnt$cnt)
sum(usuarios_cnt$cnt) - sum(ago.sep$cnt)
sum(ago.sep$cnt)
#Gráfico de densidad uso de componentes
figura4 <- ggplot(estudiantes, aes(Fecha)) +
geom_density(aes(fill=factor(Componente)), alpha=0.8, linetype = "blank") +
labs(title="Gráfico de densidad",
subtitle="Uso de componentes estudiantes",
x="Meses", y= "Densidad",
fill="Componentes") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), plot.margin = unit(c(1, 1, 1, 1), "cm"))
figura4
figura5 <- heatmap(UC, Rowv = NA, Colv = NA, col = yellow(100))
figura6 <- heatmap(UCE, Rowv = NA, Colv = NA, col = yellow(100))
View(usuarios)
usuarios_cnt
UC
?kmeans
matriz.est <- as.data.frame.matrix(UC)
kmeans(matriz.est, centers = 3)
cluster_estudiantes<- kmeans(matriz.est, centers = 3)
par(mfrow = c(1, 2))
image(t(matriz.est)[, nrow(matriz.est):1], yaxt = "n", main = "Original Data")
image(t(matriz.est)[, order(cluster_estudiantes$cluster)], yaxt = "n", main = "Clustered Data")
cluster_estudiantes <- kmeans(matriz.est, centers = 2)
par(mfrow = c(1, 2))
image(t(matriz.est)[, nrow(matriz.est):1], yaxt = "n", main = "Original Data")
image(t(matriz.est)[, order(cluster_estudiantes$cluster)], yaxt = "n", main = "Clustered Data")
cluster_estudiantes <- kmeans(matriz.est, centers = 4)
par(mfrow = c(1, 2))
image(t(matriz.est)[, nrow(matriz.est):1], yaxt = "n", main = "Original Data")
image(t(matriz.est)[, order(cluster_estudiantes$cluster)], yaxt = "n", main = "Clustered Data")
matriz.est
cor(matriz.est)
#Matriz correlación componentes
pairs(~Archivos enviados+Carpeta+Chat+Cuestionario+Foro+H5P+Recurso+Sistema+Tarea+URL+Usuario, data = states,
main ="Scatter plot matrix generated with pairs()")
?pairs
pairs(matriz.est[1:11], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
library(graphics)
pairs(matriz.est[1:11], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
pairs(matriz.est[1:11], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(matriz.est[1:11], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 1, font.labels = 1)
cor(matriz.est)
matriz.est
table(estudiantes$Nombre.evento)
table(estudiantes$Contexto.del.evento )
par(mfrow = c(1, 2))
image(t(matriz.est)[, nrow(matriz.est):1], yaxt = "n", main = "Original Data")
image(t(matriz.est)[, order(cluster_estudiantes$cluster)], yaxt = "n", main = "Clustered Data")
cluster_estudiantes <- kmeans(matriz.est, centers = 4, nstart = 50)
par(mfrow = c(1, 2))
image(t(matriz.est)[, nrow(matriz.est):1], yaxt = "n", main = "Original Data")
image(t(matriz.est)[, order(cluster_estudiantes$cluster)], yaxt = "n", main = "Clustered Data")
cluster2 <- cluster2 %>% mutate(cluster = cluster_estudiantes$cluster) #ejemplo
matriz.est <- matriz.est %>% mutate(cluster = cluster_estudiantes$cluster) #ejemplo
p1 <- ggplot(data = matriz.est, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
p1
ggplot(data = matriz.est, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
#Kmeans estudiantes y componentes
matriz.est <- as.data.frame.matrix(UC)
cluster_estudiantes <- kmeans(matriz.est, centers = 4, nstart = 50)
matriz.est <- matriz.est %>% mutate(cluster = cluster_estudiantes$cluster) #ejemplo
ggplot(data = matriz.est, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
ggplot(matriz.est, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
matriz.est
class(matriz.est)
cluster_estudiantes <- kmeans(matriz.est, centers = 4, nstart = 50)
str(cluster_estudiantes)
matriz.est <- matriz.est %>% mutate(cluster = as.factor(cluster),
grupo   = as.factor(grupo))
matriz.est <- matriz.est %>% mutate(cluster = as.factor(cluster))
ggplot(matriz.est, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
ggplot(cluster_estudiantes, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
cluster_estudiantes <- kmeans(matriz.est, centers = 4, nstart = 50)
cluster_estudiantes <- cluster_estudiantes %>% mutate(cluster = cluster_estudiantes$cluster) #ejemplo
#Kmeans estudiantes y componentes
matriz.est <- as.data.frame.matrix(UC)
ggplot(cluster_estudiantes, aes(x = x, y = y, color = as.factor(cluster))) +
geom_point(size = 3) +
labs(title = "Kmedias con k=4") +
theme_bw() +
theme(legend.position = "none")
cluster_estudiantes$cluster <- as.factor(cluster_estudiantes$cluster)
ggplot() +
geom_point(cluster_estudiantes,
aes(x = wt,
y = qsec,
color = cluster),
size = 3)
?set.seed
plot(matriz.est)
install.packages("animation")
library(animation)
kmeans.ani(matriz.est, centers = 4, nstart = 50)
kmeans.ani(matriz.est[2:3], 3)
kmeans.ani(matriz.est[2:3], 3)
kmeans.ani(matriz.est[1:3], 3)
kmeans.ani(matriz.est[1:3], 3)
kmeans.ani(matriz.est[1:3], 3)
#Kmeans estudiantes y componentes
matriz.est <-as-data.frame(table(estudiantes$Contexto.del.evento))
#Kmeans estudiantes y componentes
matriz.est <-table(estudiantes$Contexto.del.evento)
matriz.est <- as.data.frame.matrix(matriz.est)
matriz.est <- as.data.frame.matrix(matriz.est)
matriz.est
UC
matriz.est <- as.data.frame.matrix(UC)
UC
cluster_3 <- kmeans(matriz.est, 3)
cluster_3
cluster_3$whithinss
cluster_3$cluster
cluster_3$size
escalado = as.matrix(scale(matriz.est))
cluster_3 <- kmeans(escalado,3,nstart = 50,iter.max = 15)
cluster_3
#Elbow Method for finding the optimal number of clusters
set.seed(123)
# Compute and plot wss for k = 2 to k = 15.
k.max <- 15
data <- escalado
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
matriz.est
kmean_withinss(2)
#Funcion para calcular la suma total interior de la suma de cuadrados
kmean_withinss <- function(k) {
cluster <- kmeans(escalado, k)
return (cluster$tot.withinss)
}
kmean_withinss(2)
max_k <-20
# Run algorithm over a range of k
wss <- sapply(2:max_k, kmean_withinss)
# Set maximum cluster
max_k <-12
# Run algorithm over a range of k
wss <- sapply(2:max_k, kmean_withinss)
# Run algorithm over a range of k
wss <- sapply(1:max_k, kmean_withinss)
recursive ?errors
?errors
abort
'abort'
1
abort
# Run algorithm over a range of k
wss <- sapply(1:max_k, kmean_withinss)
# Set maximum cluster
max_k <-12
# Run algorithm over a range of k
wss <- sapply(1:max_k, kmean_withinss)
# Run algorithm over a range of k
wss <- sapply(2:max_k, kmean_withinss)
# Set maximum cluster
max_k <-11
# Run algorithm over a range of k
wss <- sapply(2:max_k, kmean_withinss)
elbow <-data.frame(2:max_k, wss)
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 20, by = 1))
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 11, by = 1))
#Elbow Method for finding the optimal number of clusters
set.seed(123)
# Compute and plot wss for k = 2 to k = 15.
k.max <- 11
data <- escalado
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
cluster_2 <- kmeans(escalado,2,nstart = 50,iter.max = 15)
cluster_2
View(interacciones_cnt)
table(estudiantes)
estudiantes
head(estudiantes)
#Convirtiendo factores a booleanos
lst <- select(estudiantes, -fecha, -Componente, -Nombre.evento)
library(dplyr)
#Convirtiendo factores a booleanos
lst <- select(estudiantes, -fecha, -Componente, -Nombre.evento)
library(tidyverse)
#Convirtiendo factores a booleanos
lst <- select(estudiantes, -fecha, -Componente, -Nombre.evento)
#Convirtiendo factores a booleanos
lst <- select(estudiantes, -Fecha, -Componente, -Nombre.evento)
#Convirtiendo factores a booleanos
lst  %>% select(Nombre.completo.del.usuario, Contexto.del.evento)
#Convirtiendo factores a booleanos
lst <- estudiantes  %>% select(Nombre.completo.del.usuario, Contexto.del.evento)
#Convirtiendo factores a booleanos
lst <- estudiantes  %>% select("Nombre.completo.del.usuario", "Contexto.del.evento")
?select
#Convirtiendo factores a booleanos
lst <- estudiantes
lst <- select(estudiantes, -fecha, -Componente, -Nombre.evento)
lst <- select(estudiantes, -Fecha, -Componente, -Nombre.evento)
lst <- select(lst, -Fecha, -Componente, -Nombre.evento)
class(estudiantes)
#Convirtiendo factores a booleanos
lst <- estudiantes
lst <- select(lst, -Fecha, -Componente, -Nombre.evento)
lst
library(tidyverse)
library(dplyr)
#Convirtiendo factores a booleanos
lst <- estudiantes
lst <- select(lst, -Fecha, -Componente, -Nombre.evento)
#Convirtiendo factores a booleanos
lst <- estudiantes %>% select(Nombre.completo.del.usuario, Componente)
#Convirtiendo factores a booleanos
lst <- estudiantes %>% pull(Nombre.completo.del.usuario, Componente)
lst
View(lst)
rm(lst)
#Convirtiendo factores a booleanos
lst <- estudiantes %>% select(Nombre.completo.del.usuario, Componente)
#Convirtiendo factores a booleanos
lst <- estudiantes %>% select(estudiantes , Nombre.completo.del.usuario, Componente)
#Convirtiendo factores a booleanos
lst <-  select(estudiantes , Nombre.completo.del.usuario, Componente)
head(estudiantes)
head(lst)
#Convirtiendo factores a booleanos
es_bol <-  select(estudiantes , Nombre.completo.del.usuario, Componente)
#Convirtiendo factores a booleanos
es_bol <-  select(estudiantes, Nombre.completo.del.usuario, Componente)
es_bol <- estudiantes
head(es_bol)
class(es_bol
class(es_bol)
class(es_bol)
#Convirtiendo factores a booleanos
es_bol <-  select(estudiantes, Nombre.completo.del.usuario, Componente)
es_bol %>% select(Nombre.completo.del.usuario, Componente)
es_bol %>% select(es_bol, Nombre.completo.del.usuario, Componente)
head(estudiantes)
es_bol %>% select(es_bol, Nombre.completo.del.usuario, Componente)
library(tidyverse)
es_bol %>% select(es_bol, Nombre.completo.del.usuario, Componente)
es_bol %>% select(Nombre.completo.del.usuario, Componente)
es_bol <- strsplit(as.character(es_bol$Componente),"-")
lvl <- unique(unlist(es_bol))
head(es_bol)
es_bol
res <- data.frame(date = estudiantes$Nombre.completo.del.usuario ,
do.call(rbind,lapply(lst, function(x) table(factor(x, levels=lvl)))),
stringsAsFactors=FALSE)
res
View(rs)
View(res)
#Convirtiendo factores a booleanos
es_bol <- usuarios %>% select(Nombre.completo.del.usuario, Componente)
last.warning
#Convirtiendo factores a booleanos
es_bol <- usuarios
es_bol2 <- usuarios %>% select(Nombre.completo.del.usuario, Componente)
#Convirtiendo factores a booleanos
es_bol <- usuarios %>% as.data.frame(usuarios)
es_bol <- as.data.frame(es_bol)
es_bol2 <- usuarios %>% select(Nombre.completo.del.usuario, Componente)
es_bol2 <- es_bol %>% select(Nombre.completo.del.usuario, Componente)
es_bol2 <- select(Nombre.completo.del.usuario, Componente)
es_bol2 <- select(es_bol , Nombre.completo.del.usuario, Componente)
class(es_bol)
es_bol
#Convirtiendo factores a booleanos
es_bol <- usuarios
es_bol <- as.data.frame(es_bol)
es_bol2 <- select(es_bol , Nombre.completo.del.usuario, Componente)
es_bol
usuarios
View(estudiantes)
#Convirtiendo factores a booleanos
es_bol <- estudiantes
es_bol <- as.data.frame(es_bol)
es_bol2 <- select(es_bol , Nombre.completo.del.usuario, Componente)
es_bol2 <- strsplit(as.character(es_bol2$Componente),"-")
lvl <- unique(unlist(es_bol2))
res <- data.frame(date = es_bol$Nombre.completo.del.usuario ,
do.call(rbind,lapply(lst, function(x) table(factor(x, levels=lvl)))),
stringsAsFactors=FALSE)
View(res)
#Convirtiendo factores a booleanos
es_bol <- estudiantes
es_bol2 <- select(es_bol , Nombre.completo.del.usuario, Componente)
es_bol2 <- strsplit(as.character(es_bol2$Componente),"-")
lvl <- unique(unlist(es_bol2))
res <- data.frame(date = es_bol$Nombre.completo.del.usuario ,
do.call(rbind,lapply(lst, function(x) table(factor(x, levels=lvl)))),
stringsAsFactors=FALSE)
head(res)
View(res)
rm(cluster_2)
rm(cluster_3)
rm(cluster_estudiantes)
cluster <- select(es_bol , Nombre.completo.del.usuario, Componente)
class(cluster)
class(cluster$Nombre.completo.del.usuario)
class(cluster$Componente)
rm(cluster_3)
ggplot(cluster, aes(Nombre.completo.del.usuario, Componente, col=Nombre.completo.del.usuario)) + geom_point() + ggtitle("Componentes scatter plot")
plot(cor(cluster))
chisq.test(UC)
head(UC)
?chisq.test
chisq.test(cluster)
fisher.test(UC)
fisher.test(UC, simulate.p.value=TRUE)
chisq.test(cluster, simulate.p.value = TRUE)
chisq.test(cluster, simulate.p.value = T)
chisq.test(UC, simulate.p.value = T)
fisher.test(UC, simulate.p.value=TRUE, B=2e3)
prop.table(UC)
mosaicplot(UC, color=TRUE, main="Plot de mosaico")
barplot(UC,  legend = rownames(UC), beside=F, axis.lty = 1)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = "h")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = "v")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", dir = "v")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", dir = "h")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = "v")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = "h")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = h)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir = v)
?mosaicplot
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="H")
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V", border = NA)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V", border = NA, shade = TRUE)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V", border = NA) ## shade=TRUE standarized residuals
?prop.table
prop.table(UC, 1)
prop.table(UC, 2)
mosaicplot(UC, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V", border = NA) ## shade=TRUE standarized residuals
mosaicplot(UC, color=TRUE, main="Test de independencia", las = 1,  dir ="V", border = NA) ## shade=TRUE standarized residuals
fisher.test(UCE)
fisher.test(UCE, simulate.p.value = TRUE)
chisq.test(UCE, simulate.p.value = T)
mosaicplot(UCE, color=TRUE, main="Plot de mosaico", las = 1,  dir ="V", border = NA) ## shade=TRUE standarized residuals
head(cluster)
plot_kmeans(cluster, Nombre.completo.del.usuario, Componente, resolution = 50, group = center)
library(ggplot2)
plot_kmeans(cluster, Nombre.completo.del.usuario, Componente, resolution = 50, group = center)
?plot_kmeans
??plot_kmeans
plot_kmeans <- function(df, x, y, resolution = 50, group = center) {
x <- enquo(x)
y <- enquo(y)
group <- enquo(group)
squares <- db_calculate_squares(
df = df,
x = !! x,
y = !! y,
group = !! group,
resolution = resolution
)
plot_kmeans(cluster, Nombre.completo.del.usuario, Componente, resolution = 50, group = center)
rm(plot_kmeans)
#Kmeans estudiantes y componentes
matriz.est <- as.data.frame.matrix(UC)
escalado = as.matrix(scale(matriz.est)) #Escalar
cluster_3 <- kmeans(escalado,3,nstart = 50, iter.max = 15)
cluster_3$cluster
cluster_3
matriz.est
escape
